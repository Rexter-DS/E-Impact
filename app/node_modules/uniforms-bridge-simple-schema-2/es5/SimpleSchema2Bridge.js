"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var cloneDeep_1 = tslib_1.__importDefault(require("lodash/cloneDeep"));
var memoize_1 = tslib_1.__importDefault(require("lodash/memoize"));
var simpl_schema_1 = tslib_1.__importDefault(require("simpl-schema"));
var uniforms_1 = require("uniforms");
var SimpleSchema2Bridge = /** @class */ (function (_super) {
    tslib_1.__extends(SimpleSchema2Bridge, _super);
    function SimpleSchema2Bridge(schema) {
        var _this = _super.call(this) || this;
        _this.schema = schema;
        // Memoize for performance and referential equality.
        _this.getField = memoize_1.default(_this.getField);
        _this.getSubfields = memoize_1.default(_this.getSubfields);
        _this.getType = memoize_1.default(_this.getType);
        return _this;
    }
    SimpleSchema2Bridge.prototype.getError = function (name, error) {
        var _a, _b;
        // FIXME: Correct type for `error`.
        return ((_b = (_a = error === null || error === void 0 ? void 0 : error.details) === null || _a === void 0 ? void 0 : _a.find) === null || _b === void 0 ? void 0 : _b.call(_a, function (error) { return error.name === name; })) || null;
    };
    SimpleSchema2Bridge.prototype.getErrorMessage = function (name, error) {
        var scopedError = this.getError(name, error);
        // @ts-ignore: `messageForError` has incorrect typing.
        return !scopedError ? '' : this.schema.messageForError(scopedError);
    };
    SimpleSchema2Bridge.prototype.getErrorMessages = function (error) {
        var _this = this;
        if (error) {
            if (Array.isArray(error.details)) {
                // FIXME: Correct type for `error`.
                return error.details.map(function (error) {
                    // @ts-ignore: `messageForError` has incorrect typing.
                    return _this.schema.messageForError(error);
                });
            }
            if (error.message) {
                return [error.message];
            }
        }
        if (error !== undefined) {
            return [error];
        }
        return [];
    };
    SimpleSchema2Bridge.prototype.getField = function (name) {
        var definition = this.schema.getDefinition(name);
        invariant_1.default(definition, 'Field not found in schema: "%s"', name);
        var merged = tslib_1.__assign(tslib_1.__assign({}, definition), definition.type[0]);
        // aldeed/node-simple-schema#27
        if (merged.autoValue &&
            (merged.autoValue.name === 'defaultAutoValueFunction' ||
                merged.autoValue.toString().indexOf('$setOnInsert:') !== -1) // FIXME: Hack.
        ) {
            try {
                merged.defaultValue = merged.autoValue.call({ operator: null });
            }
            catch (_) {
                /* ignore it */
            }
        }
        return merged;
    };
    SimpleSchema2Bridge.prototype.getInitialValue = function (name, props) {
        if (props === void 0) { props = {}; }
        var field = this.getField(name);
        if (field.type === Array) {
            var item_1 = this.getInitialValue(uniforms_1.joinName(name, '0'));
            var items = Math.max(props.initialCount || 0, field.minCount || 0);
            return Array.from({ length: items }, function () { return item_1; });
        }
        if (field.type === Object || field.type instanceof simpl_schema_1.default) {
            return {};
        }
        return field.defaultValue;
    };
    // eslint-disable-next-line complexity
    SimpleSchema2Bridge.prototype.getProps = function (name, props) {
        if (props === void 0) { props = {}; }
        var _a = this.getField(name), optional = _a.optional, type = _a.type, uniforms = _a.uniforms, contextField = tslib_1.__rest(_a, ["optional", "type", "uniforms"]);
        var field = tslib_1.__assign(tslib_1.__assign({}, contextField), { required: !optional });
        if (uniforms) {
            if (typeof uniforms === 'string' || typeof uniforms === 'function') {
                field = tslib_1.__assign(tslib_1.__assign({}, field), { component: uniforms });
            }
            else {
                field = tslib_1.__assign(tslib_1.__assign({}, field), uniforms);
            }
        }
        if (type === Array) {
            try {
                var itemProps = this.getProps(name + ".$", props);
                if (itemProps.allowedValues && !props.allowedValues) {
                    field.allowedValues = itemProps.allowedValues;
                }
                if (itemProps.transform && !props.transform) {
                    field.transform = itemProps.transform;
                }
            }
            catch (_) {
                /* ignore it */
            }
        }
        else if (type === Number) {
            field = tslib_1.__assign(tslib_1.__assign({}, field), { decimal: true });
        }
        var options = props.options || field.options;
        if (options) {
            if (typeof options === 'function') {
                options = options();
            }
            if (!Array.isArray(options)) {
                field = tslib_1.__assign(tslib_1.__assign({}, field), { transform: function (value) { return options[value]; }, allowedValues: Object.keys(options) });
            }
            else {
                field = tslib_1.__assign(tslib_1.__assign({}, field), { transform: function (value) {
                        return options.find(function (option) { return option.value === value; }).label;
                    }, allowedValues: options.map(function (option) { return option.value; }) });
            }
        }
        return field;
    };
    SimpleSchema2Bridge.prototype.getSubfields = function (name) {
        // @ts-ignore: Typing for `_makeGeneric` is missing.
        return this.schema.objectKeys(simpl_schema_1.default._makeGeneric(name));
    };
    SimpleSchema2Bridge.prototype.getType = function (name) {
        var type = this.getField(name).type;
        if (type === simpl_schema_1.default.Integer) {
            return Number;
        }
        if (type instanceof simpl_schema_1.default) {
            return Object;
        }
        return type;
    };
    // TODO: `ValidationOption` is not exported.
    SimpleSchema2Bridge.prototype.getValidator = function (options) {
        if (options === void 0) { options = { clean: true, mutate: true }; }
        var validator = this.schema.validator(options);
        return function (model) {
            try {
                // Clean mutate its argument, even if mutate is false.
                validator(options.clean ? cloneDeep_1.default(tslib_1.__assign({}, model)) : model);
                return null;
            }
            catch (error) {
                return error;
            }
        };
    };
    return SimpleSchema2Bridge;
}(uniforms_1.Bridge));
exports.default = SimpleSchema2Bridge;
