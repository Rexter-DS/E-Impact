import { HTMLProps, ReactNode, SyntheticEvent } from 'react';
import { Bridge } from './Bridge';
export declare type ChangedMap<T> = T extends object ? {
    [P in keyof T]?: ChangedMap<T[P]>;
} : Record<string, void>;
export declare type Context<Model> = {
    changed: boolean;
    changedMap: ChangedMap<Model>;
    error: any;
    model: DeepPartial<Model>;
    name: string[];
    onChange(key: string, value?: any): void;
    onSubmit(event?: SyntheticEvent): any | Promise<any>;
    randomId(): string;
    schema: Bridge;
    state: {
        disabled: boolean;
        label: boolean;
        placeholder: boolean;
        showInlineError: boolean;
    };
    submitting: boolean;
    validating: boolean;
};
export declare type DeepPartial<T> = {
    [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};
export declare type FieldProps<Value, Base, Extension = object> = Override<Base, GuaranteedProps<Value> & Extension>;
export interface FilterDOMProps {
}
export declare type GuaranteedProps<Value> = {
    changed: boolean;
    disabled: boolean;
    error?: any;
    errorMessage?: string;
    field: any;
    fieldType: any;
    fields: string[];
    id: string;
    label: ReactNode;
    name: string;
    onChange(value?: Value | null, name?: string): void;
    placeholder: string;
    showInlineError: boolean;
    value?: Value;
};
export declare type HTMLFieldProps<Value, Element, Extension = object> = FieldProps<Value, HTMLProps<Element>, Extension>;
export declare type ModelTransformMode = 'form' | 'submit' | 'validate';
export declare type Override<T, U> = U & Omit<T, keyof U>;
export declare type Partialize<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
export declare type ValidateMode = 'onChange' | 'onChangeAfterSubmit' | 'onSubmit';
declare module '.' {
    interface FilterDOMProps {
        allowedValues: never;
        changed: never;
        component: never;
        disabled: never;
        error: never;
        errorMessage: never;
        field: never;
        fieldType: never;
        fields: never;
        initialCount: never;
        label: never;
        name: never;
        onChange: never;
        placeholder: never;
        showInlineError: never;
        transform: never;
        value: never;
    }
}
