import { FilterDOMProps } from '.';
declare type FilterDOMPropsKeys = keyof FilterDOMProps;
declare function filter<T extends object>(props: T): Pick<T, Exclude<keyof T, "disabled" | "transform" | "label" | "changed" | "error" | "errorMessage" | "field" | "fieldType" | "fields" | "name" | "onChange" | "placeholder" | "showInlineError" | "value" | "allowedValues" | "component" | "initialCount">>;
declare function register(...props: FilterDOMPropsKeys[]): void;
export declare const filterDOMProps: typeof filter & {
    register: typeof register;
    registered: readonly ("disabled" | "transform" | "label" | "changed" | "error" | "errorMessage" | "field" | "fieldType" | "fields" | "name" | "onChange" | "placeholder" | "showInlineError" | "value" | "allowedValues" | "component" | "initialCount")[];
};
export {};
