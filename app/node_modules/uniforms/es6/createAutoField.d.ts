import { ComponentType } from 'react';
import { connectField } from './connectField';
import { Context, Override } from './types';
import { useField } from './useField';
declare type AutoFieldProps = Override<Record<string, unknown>, {
    component?: Component;
    name: string;
}>;
declare type Component = ComponentType<any> | ReturnType<typeof connectField>;
declare type ComponentDetector = (props: ReturnType<typeof useField>[0], uniforms: Context<unknown>) => Component;
export declare function createAutoField(defaultComponentDetector: ComponentDetector): {
    (rawProps: AutoFieldProps): import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
    componentDetectorContext: import("react").Context<ComponentDetector>;
    defaultComponentDetector: ComponentDetector;
};
export {};
