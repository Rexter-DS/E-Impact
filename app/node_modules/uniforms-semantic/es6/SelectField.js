import { __rest } from "tslib";
import classnames from 'classnames';
import xor from 'lodash/xor';
import React from 'react';
import { connectField, filterDOMProps } from 'uniforms';
const base64 = typeof btoa !== 'undefined'
    ? btoa
    : (x) => Buffer.from(x).toString('base64');
const escape = (x) => base64(encodeURIComponent(x)).replace(/=+$/, '');
function Select(_a) {
    var { allowedValues, checkboxes, className, disableItem, disabled, error, errorMessage, fieldType, id, inputRef, label, name, onChange, placeholder, required, showInlineError, transform, value } = _a, props = __rest(_a, ["allowedValues", "checkboxes", "className", "disableItem", "disabled", "error", "errorMessage", "fieldType", "id", "inputRef", "label", "name", "onChange", "placeholder", "required", "showInlineError", "transform", "value"]);
    return (React.createElement("div", Object.assign({ className: classnames({ disabled, error, required }, className, 'field') }, filterDOMProps(props)),
        label && React.createElement("label", { htmlFor: id }, label),
        checkboxes || fieldType === Array ? (allowedValues === null || allowedValues === void 0 ? void 0 : allowedValues.map(item => (React.createElement("div", { className: "field", key: item },
            React.createElement("div", { className: "ui checkbox" },
                React.createElement("input", { checked: fieldType === Array ? value === null || value === void 0 ? void 0 : value.includes(item) : value === item, disabled: (disableItem === null || disableItem === void 0 ? void 0 : disableItem(item)) || disabled, id: `${id}-${escape(item)}`, name: name, onChange: () => onChange(fieldType === Array ? xor([item], value) : item), type: "checkbox" }),
                React.createElement("label", { htmlFor: `${id}-${escape(item)}` }, transform ? transform(item) : item)))))) : (React.createElement("select", { className: "ui selection dropdown", disabled: disabled, id: id, name: name, onChange: event => onChange(event.target.value !== '' ? event.target.value : undefined), ref: inputRef, value: value !== null && value !== void 0 ? value : '' },
            (!!placeholder || !required || value === undefined) && (React.createElement("option", { value: "", disabled: required, hidden: required }, placeholder || label)), allowedValues === null || allowedValues === void 0 ? void 0 :
            allowedValues.map(value => (React.createElement("option", { disabled: disableItem === null || disableItem === void 0 ? void 0 : disableItem(value), key: value, value: value }, transform ? transform(value) : value))))),
        !!(error && showInlineError) && (React.createElement("div", { className: "ui red basic pointing label" }, errorMessage))));
}
export default connectField(Select, { kind: 'leaf' });
